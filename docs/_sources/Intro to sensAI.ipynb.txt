{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "# Lightning intro to sensAI\n",
    "\n",
    "In this notebook we will demonstrate some of sensAI's main features by training a model together\n",
    "with feature extractors and custom normalization rules. This will also demonstrate how easy it is to wrap one's\n",
    "own model declaration into a sensAI model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "### Before running the notebook\n",
    "\n",
    "Install the package and its dependencies, if you haven't done so already. E.g. for an editable install call\n",
    "```\n",
    "pip install -e .\n",
    "```\n",
    "from the root directory. You can also execute this command directly in the notebook but will need to reload the\n",
    "kernel afterwards"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "# Note - this cell should be executed only once per session\n",
    "\n",
    "%load_ext autoreload\n",
    "%autoreload 2\n",
    "\n",
    "import sys, os\n",
    "\n",
    "# in order to get the top level modules; they are not part of the package\n",
    "os.chdir(\"..\")\n",
    "sys.path.append(os.path.abspath(\".\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import sensai as sn\n",
    "from sklearn.neural_network import MLPRegressor\n",
    "from sklearn.preprocessing import StandardScaler, MaxAbsScaler, MinMaxScaler\n",
    "from sensai import VectorRegressionModel\n",
    "from sensai.data_transformation import DFTNormalisation\n",
    "from sensai.evaluation.eval_util import createVectorModelEvaluator\n",
    "from sensai.data_ingest import InputOutputData\n",
    "from sensai.tracking.trains_tracking import TrackedTrainsExperiment\n",
    "import sensai.featuregen as fgen\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "import logging\n",
    "logging.basicConfig(level=logging.INFO)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:config.__Configuration:Reading configuration from /home/runner/work/sensAI/sensAI/config.json\n"
     ]
    }
   ],
   "source": [
    "from config import get_config\n",
    "\n",
    "c  = get_config(reload=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "## Loading the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>crim</th>\n",
       "      <th>zn</th>\n",
       "      <th>indus</th>\n",
       "      <th>chas</th>\n",
       "      <th>nox</th>\n",
       "      <th>rm</th>\n",
       "      <th>age</th>\n",
       "      <th>dis</th>\n",
       "      <th>rad</th>\n",
       "      <th>tax</th>\n",
       "      <th>ptratio</th>\n",
       "      <th>b</th>\n",
       "      <th>lstat</th>\n",
       "      <th>medv</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.00632</td>\n",
       "      <td>18.0</td>\n",
       "      <td>2.31</td>\n",
       "      <td>0</td>\n",
       "      <td>0.538</td>\n",
       "      <td>6.575</td>\n",
       "      <td>65.2</td>\n",
       "      <td>4.0900</td>\n",
       "      <td>1</td>\n",
       "      <td>296</td>\n",
       "      <td>15.3</td>\n",
       "      <td>396.90</td>\n",
       "      <td>4.98</td>\n",
       "      <td>24.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.02731</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0</td>\n",
       "      <td>0.469</td>\n",
       "      <td>6.421</td>\n",
       "      <td>78.9</td>\n",
       "      <td>4.9671</td>\n",
       "      <td>2</td>\n",
       "      <td>242</td>\n",
       "      <td>17.8</td>\n",
       "      <td>396.90</td>\n",
       "      <td>9.14</td>\n",
       "      <td>21.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.02729</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0</td>\n",
       "      <td>0.469</td>\n",
       "      <td>7.185</td>\n",
       "      <td>61.1</td>\n",
       "      <td>4.9671</td>\n",
       "      <td>2</td>\n",
       "      <td>242</td>\n",
       "      <td>17.8</td>\n",
       "      <td>392.83</td>\n",
       "      <td>4.03</td>\n",
       "      <td>34.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.03237</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0</td>\n",
       "      <td>0.458</td>\n",
       "      <td>6.998</td>\n",
       "      <td>45.8</td>\n",
       "      <td>6.0622</td>\n",
       "      <td>3</td>\n",
       "      <td>222</td>\n",
       "      <td>18.7</td>\n",
       "      <td>394.63</td>\n",
       "      <td>2.94</td>\n",
       "      <td>33.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.06905</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0</td>\n",
       "      <td>0.458</td>\n",
       "      <td>7.147</td>\n",
       "      <td>54.2</td>\n",
       "      <td>6.0622</td>\n",
       "      <td>3</td>\n",
       "      <td>222</td>\n",
       "      <td>18.7</td>\n",
       "      <td>396.90</td>\n",
       "      <td>5.33</td>\n",
       "      <td>36.2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      crim    zn  indus  chas    nox     rm   age     dis  rad  tax  ptratio  \\\n",
       "0  0.00632  18.0   2.31     0  0.538  6.575  65.2  4.0900    1  296     15.3   \n",
       "1  0.02731   0.0   7.07     0  0.469  6.421  78.9  4.9671    2  242     17.8   \n",
       "2  0.02729   0.0   7.07     0  0.469  7.185  61.1  4.9671    2  242     17.8   \n",
       "3  0.03237   0.0   2.18     0  0.458  6.998  45.8  6.0622    3  222     18.7   \n",
       "4  0.06905   0.0   2.18     0  0.458  7.147  54.2  6.0622    3  222     18.7   \n",
       "\n",
       "        b  lstat  medv  \n",
       "0  396.90   4.98  24.0  \n",
       "1  396.90   9.14  21.6  \n",
       "2  392.83   4.03  34.7  \n",
       "3  394.63   2.94  33.4  \n",
       "4  396.90   5.33  36.2  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "housing_data = c.datafile_path(\"boston_housing.csv\", stage=c.RAW)\n",
    "housing_df = pd.read_csv(housing_data)\n",
    "\n",
    "housing_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "X = housing_df.copy()\n",
    "y = pd.DataFrame({\"nox\": X.pop(\"nox\")})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "We will use this as target\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>nox</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.469</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.469</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.458</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.458</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     nox\n",
       "0  0.538\n",
       "1  0.469\n",
       "2  0.469\n",
       "3  0.458\n",
       "4  0.458"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\"We will use this as target\")\n",
    "y.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "## Creating a Custom Model\n",
    "\n",
    "Although sensAI provides several implementations of different models across major frameworks (SKlearn, TensorFlow,\n",
    "PyTorch), we put special care to make it easy for you to bring your own model. The `VectorModel` based\n",
    "classes provides abstractions which can be used for most learning problems of the type \"datapoint in,\n",
    "row of predictions out\". The row of predictions can contain a vector with class probabilities, one or multiple\n",
    "regression targets and so on. For problems of the type: \"datapoint in, multidimensional tensor out\", see the\n",
    "tutorial in TBA.\n",
    "\n",
    "We will use VectorModel to wrap scikit-learn's implementation of a multi layer perceptron."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "class CustomModel(VectorRegressionModel):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        self.model = MLPRegressor()\n",
    "\n",
    "    def _predict(self, x: pd.DataFrame) -> pd.DataFrame:\n",
    "        values = self.model.predict(x)\n",
    "        return pd.DataFrame({\"nox\": values}, index=x.index)\n",
    "\n",
    "    def _fit(self, X: pd.DataFrame, Y: pd.DataFrame):\n",
    "        self.model.fit(X, Y.values.ravel())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "## Feature Generation and Normalization\n",
    "\n",
    "Some of sensAI's core design principles include explicitness and safety of data wrangling. Special care was taken to\n",
    "ensure that everything that happens to input data during feature extraction, preprocessing, training and inference was\n",
    "intended by the user. Since for many projects feature engineering is decisive for model performance, it is absolutely\n",
    "crucial that the developer has full control over all transformations that are going on during training and inference.\n",
    "\n",
    "\n",
    "The feature generation and normalization modules helps with this, allowing fine-grained control over each step in the\n",
    "processing pipeline. Since the feature generators and the normalization data frame transforms can be bound to a sensAI\n",
    "model, it is guaranteed that the data pipeline at inference will work exactly as intended.\n",
    "If something unexpected happens at inference time, like an unknown column, wrong order of columns etc, an error will be\n",
    "raised. Errors will also be raised (unless specifically disabled) if there are columns for which no normalization rules\n",
    " have been provided for columns.\n",
    "This ensures that the user has thought about how to deal with different features and that no surprises happen.\n",
    "\n",
    "This level of control comes at the price of verbosity. sensAI classes and arguments tend to have long names,\n",
    "explaining exactly what they do and what the intended use case looks like.\n",
    "\n",
    "Below we will show an example of feature engineering.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "### Defining Feature Generators\n",
    "\n",
    "Below we will define two feature generators. One will compensate the tax for fraud, by assuming that if the declared\n",
    "tax in the dataframe is above a threshold, we have to subtract some fixed value that was lied about. The threshold\n",
    "is extracted from the dataframe when the feature generator is fit.\n",
    "\n",
    "The second feature generator simply takes the columns \"crim\" and \"age\" as is and marks that they should be normalized."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "class TaxFraudFeaturegen(fgen.FeatureGenerator):\n",
    "    def __init__(self, tax_column=\"tax\", value_lied_about=12.0):\n",
    "        self.value_lied_about = value_lied_about\n",
    "        self.tax_column = tax_column\n",
    "        self.threshold = None\n",
    "        super().__init__(\n",
    "            normalisationRuleTemplate=DFTNormalisation.RuleTemplate(\n",
    "                transformer=MinMaxScaler()\n",
    "            )\n",
    "        )\n",
    "\n",
    "    def fit(self, X: pd.DataFrame, Y: pd.DataFrame, ctx=None):\n",
    "        self.threshold = X[self.tax_column].median()\n",
    "\n",
    "    def compensate_for_fraud(self, tax: float):\n",
    "        if tax > self.threshold:\n",
    "            tax = tax - self.value_lied_about\n",
    "        return tax\n",
    "\n",
    "    def _generate(self, df: pd.DataFrame, ctx=None) -> pd.DataFrame:\n",
    "        result = pd.DataFrame()\n",
    "        result[self.tax_column] = df[self.tax_column].apply(self.compensate_for_fraud)\n",
    "        return result\n",
    "\n",
    "\n",
    "crime_age_featuregen = fgen.FeatureGeneratorTakeColumns(\n",
    "    columns=[\"crim\", \"age\"],\n",
    "    normalisationRuleTemplate=DFTNormalisation.RuleTemplate(skip=True),\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "### The Feature Registry\n",
    "\n",
    "We could simply take the feature generators as they are and plug them into our model but instead we demonstrate\n",
    "one more class in sensAI: the feature registry. Creating a registry is convenient for rapid experimentation\n",
    "and for keeping track of useful features in a large project. You might not know which ones will be useful for which\n",
    "model so the registry abstraction helps you checking in features into git and staying organized.\n",
    "\n",
    "Here we create the a dedicated registry for the housing features. The registry will hold factories\n",
    "of featuregens which will create singleton instances if called withing the training/inference pipeline\n",
    "(this is optional).\n",
    "The collector is pinned to a registry and allows to call the registered features by name (if desired).\n",
    "This might not make much sense in a notebook but imagine having a central feature registry somewhere in you code. This\n",
    "way you can combine the registered features with some features that you cooked up in a script, all in a few lines of code."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "housing_feature_registry = fgen.FeatureGeneratorRegistry(useSingletons=True)\n",
    "\n",
    "housing_feature_registry.tax = TaxFraudFeaturegen\n",
    "\n",
    "feature_collector = fgen.FeatureCollector(\"tax\", crime_age_featuregen, registry=housing_feature_registry)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "### Normalization of Input and Target\n",
    "\n",
    "Now we come to the issue of normalization. In each feature generator we have declared how the resulting\n",
    "columns should be normalized. We can use this information by instantiating `DFTNormalisation`.\n",
    "If a rule for some column is missing, the normalization object will raise an error. There is a way\n",
    "to circumvent this error - set `requireAllHandled` to False. In that case, you should probably\n",
    "use a defaultTransformerFactory to normalize all remaining columns. However, we recommend to explicitly pass\n",
    "all normalization rules to the feature generators themselves, just to be sure that nothing is missing.\n",
    "\n",
    "For normalizing the target we have to use an invertible transformer, we will take the MaxAbsScaler here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "dft_normalisation = sn.data_transformation.DFTNormalisation(\n",
    "    feature_collector.getNormalizationRules(),\n",
    "    requireAllHandled=True,\n",
    ")\n",
    "\n",
    "target_transformer = sn.data_transformation.DFTSkLearnTransformer(MaxAbsScaler())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "### Combining Everything with the Model\n",
    "\n",
    "Now we can plug all these components into our vector model and enjoy a safe and robust that will\n",
    "work during training and inference. The model already has methods for saving and loading and is ready to\n",
    "be deployed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "custom_model = CustomModel()\n",
    "\n",
    "custom_model = custom_model \\\n",
    "    .withFeatureCollector(feature_collector) \\\n",
    "    .withInputTransformers(dft_normalisation) \\\n",
    "    .withTargetTransformer(target_transformer) \\\n",
    "    .withName(\"housing_predictor\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.vector_model:Training CustomModel\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.vector_model:Training with outputs[1]=['nox'], inputs[3]=[tax/float64, crim/float64, age/float64]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>nox</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.535714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.570608</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.526162</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.488184</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.509537</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        nox\n",
       "0  0.535714\n",
       "1  0.570608\n",
       "2  0.526162\n",
       "3  0.488184\n",
       "4  0.509537"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "custom_model.fit(X, y)\n",
    "custom_model.predict(X).head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "## SensAI Featuregen vs. Sklearn Pipelines\n",
    "\n",
    "TBA"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "## Model Evaluation\n",
    "\n",
    "sensAI has extensive support for evaluating different types of models with different methods, including\n",
    "cross validation. The evaluation has native support for experiment tracking frameworks, like trains or MLflow.\n",
    "Here we will use trains, so after running this notebook you will be able to see the result in the\n",
    "trains demo-server.\n",
    "\n",
    "The evaluation is generally based on the following structure: an `Evaluator` object holds a dataset.\n",
    "An `Evaluator` can evaluate multiple models by calling `Evaluator.evalModel(model)`,\n",
    "this ensures that the same kind of evaluation is performed and thus the results can be compared in meaningful way\n",
    "(the latter is crucial for model selection). This `.evalModel(model)` call returns an EvalData object, h\n",
    "olding the evaluation data and containing methods for computing metrics and visualization.\n",
    "\n",
    "Similarly, a `CrossValidator` holds data and can perform cross validation,\n",
    "\n",
    "Below we will show a simple example for that, using the lower-level evaluation interfaces. There is also\n",
    "a higher level evaluation interfaces in the eval_util module, we will leave that to a separate intro."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TRAINS Task: created new task id=8afc5fb65e424656a17c814fef283de4\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TRAINS results page: https://demoapp.trains.allegro.ai/projects/6b4a3931fb1d442fbd1a4f3696766d4a/experiments/8afc5fb65e424656a17c814fef283de4/output/log\n"
     ]
    }
   ],
   "source": [
    "io_data = InputOutputData(X, y)\n",
    "\n",
    "trains_experiment = TrackedTrainsExperiment(projectName=\"sensai_demo\", taskName=\"custom_model\")\n",
    "evaluator = createVectorModelEvaluator(io_data, isRegression=custom_model.isRegressionModel(),\n",
    "                                       testFraction=0.2)\n",
    "evaluator.setTrackedExperiment(trains_experiment)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.vector_model:Training CustomModel\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.vector_model:Training with outputs[1]=['nox'], inputs[3]=[tax/float64, crim/float64, age/float64]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.evaluation.evaluator:Training of CustomModel completed in 0.6 seconds\n"
     ]
    }
   ],
   "source": [
    "new_custom_model = CustomModel() \\\n",
    "    .withFeatureCollector(feature_collector) \\\n",
    "    .withInputTransformers(dft_normalisation) \\\n",
    "    .withTargetTransformer(target_transformer) \\\n",
    "    .withName(\"housing_predictor\")\n",
    "\n",
    "evaluator.fitModel(new_custom_model)\n",
    "eval_stats = evaluator.evalModel(new_custom_model).getEvalStats()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:sensai.util.tracking:Finished execution of getAll in 0.00s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'RRSE': 0.7443694711019345, 'R2': 0.4459140904914263, 'PCC': 0.799516647155934, 'MAE': 0.06565383458946615, 'MSE': 0.007170218478675961, 'RMSE': 0.08467714259867276, 'StdDevAE': 0.053477027613499414}\n"
     ]
    }
   ],
   "source": [
    "print(eval_stats.getAll())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TRAINS Monitor: GPU monitoring failed getting GPU reading, switching off GPU monitoring\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Demonstrating plotting capabilities\n"
     ]
    }
   ],
   "source": [
    "eval_stats.plotScatterGroundTruthPredictions()\n",
    "eval_stats.plotErrorDistribution()\n",
    "eval_stats.plotHeatmapGroundTruthPredictions()\n",
    "plt.show()\n",
    "print(\"Demonstrating plotting capabilities\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "eval_stats.plotScatterGroundTruthPredictions()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "## Things we left out in this intro\n",
    "\n",
    " - Already implemented models and feature generators\n",
    " - Caching (this is actually one of the central features)\n",
    " - Support for ensembling and parallelization\n",
    " - The local search and hyperopt modules, including grid-search, simulated-annealing and other stuff\n",
    " - kNN and clustering implementations\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
